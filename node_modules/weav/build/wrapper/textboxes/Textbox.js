'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Textbox = function (_Component) {
  _inherits(Textbox, _Component);

  function Textbox(props) {
    _classCallCheck(this, Textbox);

    var _this = _possibleConstructorReturn(this, (Textbox.__proto__ || Object.getPrototypeOf(Textbox)).call(this, props));

    _this.state = {};

    _this.setWrapperRef = _this.setWrapperRef.bind(_this);
    _this.handleClickOutside = _this.handleClickOutside.bind(_this);
    return _this;
  }

  _createClass(Textbox, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      // eslint-disable-next-line no-undef
      document.addEventListener('mousedown', this.handleClickOutside);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      // eslint-disable-next-line no-undef
      document.removeEventListener('mousedown', this.handleClickOutside);
    }
  }, {
    key: 'setWrapperRef',
    value: function setWrapperRef(node) {
      this.wrapperRef = node;
    }
  }, {
    key: 'handleClickOutside',
    value: function handleClickOutside(event) {
      var onClickOutside = this.props.onClickOutside;

      if (this.wrapperRef && !this.wrapperRef.contains(event.target)) {
        onClickOutside(event);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          textboxType = _props.textboxType,
          style = _props.style,
          wrapperStyle = _props.wrapperStyle,
          placeholder = _props.placeholder,
          id = _props.id,
          maxLength = _props.maxLength,
          onChange = _props.onChange;
      var value = this.props.value;


      var wrapperAdditionalStyle = {
        paddingLeft: 3,
        paddingRight: 3,
        paddingTop: 3,
        paddingBottom: 3,
        borderColor: '#D8D8D8',
        borderStyle: 'solid',
        borderWidth: 1,
        width: '100%',
        maxWidth: 300
      };

      var textboxStyle = {
        fontSize: 14,
        fontFamily: 'sans-serif',
        width: '100%',
        outline: 'none',
        borderWidth: 0
      };

      if (value === null) {
        value = '';
      }

      return _react2.default.createElement(
        'div',
        {
          style: (0, _objectAssign2.default)(wrapperAdditionalStyle, wrapperStyle),
          ref: this.setWrapperRef
        },
        _react2.default.createElement('input', {
          type: textboxType,
          style: (0, _objectAssign2.default)(textboxStyle, style),
          placeholder: placeholder,
          id: id,
          maxLength: maxLength,
          onChange: onChange,
          value: value
        })
      );
    }
  }]);

  return Textbox;
}(_react.Component);

Textbox.propTypes = {
  // eslint-disable-next-line react/forbid-prop-types
  wrapperStyle: _propTypes2.default.object,
  // eslint-disable-next-line react/forbid-prop-types
  style: _propTypes2.default.object,
  textboxType: _propTypes2.default.string,
  placeholder: _propTypes2.default.string,
  id: _propTypes2.default.string,
  maxLength: _propTypes2.default.number,
  onChange: _propTypes2.default.func,
  onClickOutside: _propTypes2.default.func,
  // eslint-disable-next-line react/forbid-prop-types
  value: _propTypes2.default.any
};

Textbox.defaultProps = {
  wrapperStyle: {},
  style: {},
  textboxType: 'text',
  placeholder: '',
  id: '',
  maxLength: null,
  onChange: function onChange() {},
  onClickOutside: function onClickOutside() {},
  value: ''
};

exports.default = Textbox;